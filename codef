require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const app = express();
app.use(express.json());
app.use(cors());
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});
const DataSchema = new mongoose.Schema({
  name: String,
  email: String,
});

const DataModel = mongoose.model("User", DataSchema);
app.post("/create", async (req, res) => {
  const newData = new DataModel(req.body);
  await newData.save();
  res.json(newData);
});

app.get("/read", async (req, res) => {
  const data = await DataModel.find();
  res.json(data);
});

app.put("/update/:id", async (req, res) => {
  await DataModel.findByIdAndUpdate(req.params.id, req.body);
  res.json({ message: "Updated Successfully" });
});

app.delete("/delete/:id", async (req, res) => {
  await DataModel.findByIdAndDelete(req.params.id);
  res.json({ message: "Deleted Successfully" });
});

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));


HTML+CSS+JS

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Management App</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f4;
            text-align: center;
            padding: 20px;
        }
        input, button {
            margin: 5px;
            padding: 10px;
        }
        .data-container {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h2>Data Management App</h2>
    
    <input type="text" id="name" placeholder="Enter Name">
    <input type="email" id="email" placeholder="Enter Email">
    <button onclick="createData()">Add Data</button>

    <div class="data-container" id="dataContainer"></div>

    <script>
        const apiUrl = "http://localhost:5000";

        async function createData() {
            const name = document.getElementById("name").value;
            const email = document.getElementById("email").value;

            await fetch(`${apiUrl}/create`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, email })
            });
            fetchData();
        }

        async function fetchData() {
            const response = await fetch(`${apiUrl}/read`);
            const data = await response.json();
            document.getElementById("dataContainer").innerHTML = data.map(user => `
                <p>${user.name} - ${user.email} 
                <button onclick="deleteData('${user._id}')">Delete</button>
                </p>`).join("");
        }

        async function deleteData(id) {
            await fetch(`${apiUrl}/delete/${id}`, { method: "DELETE" });
            fetchData();
        }

        fetchData();
    </script>
</body>
</html>

